name: "AI Sec Linter"
description: "Run the AI Sec linter for Terraform and Kubernetes configurations to identify security issues."
author: "Darren Rabbitt"

inputs:
  infra_dir:
    description: "Path to the infrastructure directory to lint."
    required: true
  config_path:
    description: "Path to the config.yaml file. Defaults to './config/config.yaml'."
    required: false
    default: "./config/config.yaml"
  openai_api_token:
    description: "OpenAI API token for optional insights."
    required: false
    default: ""
  fail_on_critical:
    description: "Whether to fail the job on critical issues."
    required: false
    default: "true"
  fail_on_high:
    description: "Whether to fail the job on high issues."
    required: false
    default: "false"
  fail_on_medium:
    description: "Whether to fail the job on medium issues."
    required: false
    default: "false"
  github_token:
    description: "Optional GitHub token for deploying static reports to GitHub Pages."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Restore AI Response Cache
      uses: actions/cache@v3
      with:
        path: ~/.ai_sec/openai_cache.json
        key: ${{ runner.os }}-ai-sec-cache-${{ hashFiles('~/.ai_sec/openai_cache.json') }}
        restore-keys: |
          ${{ runner.os }}-ai-sec-cache-

    - name: Run AI Sec Linter
      uses: docker://darrendev80/ai_sec:latest
      env:
        INFRA_DIR: "${{ inputs.infra_dir }}"
        CONFIG_FILE: "${{ inputs.config_path }}"
        OPENAI_API_KEY: "${{ inputs.openai_api_token }}"
        AI_SEC_NO_DASH: "true"
      with:
        args: |
          --infra-dir=${{ inputs.infra_dir }}
          --config-path=${{ inputs.config_path }}
          --no-dash

    - name: Upload AI Sec Report
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v3
      with:
        name: ai-sec-report
        path: |
          reports/report.json
          reports/summary_report.json
          reports/report.html

    - name: Deploy Static Report to GitHub Pages
      if: ${{ inputs.github_token != '' }}
      run: |
        # Determine the branch-specific directory
        BRANCH_DIR="${{ github.head_ref }}"
        if [ -z "$BRANCH_DIR" ]; then
          BRANCH_DIR="${{ github.ref_name }}"
        fi

        BUILD_DIR="reports"
        BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

        # Configure Git
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

        # Check if gh-pages branch exists
        git ls-remote --exit-code --heads https://github.com/${{ github.repository }} gh-pages || {
          echo "gh-pages branch does not exist. Skipping report publishing."
          exit 0
        }

        # Clone the gh-pages branch
        git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages || git init gh-pages
        cd gh-pages

        # Create branch-specific subdirectory and copy reports
        mkdir -p "$BRANCH_DIR"
        cp -r "../$BUILD_DIR/"* "$BRANCH_DIR"

        # Commit and push changes
        git add "$BRANCH_DIR"
        git commit -m "Deploy reports for branch $BRANCH_DIR"
        git push --force https://${{ inputs.github_token }}@github.com/${{ github.repository }} gh-pages

        # Output the report URL
        echo "REPORT_URL=$BASE_URL/$BRANCH_DIR/report.html" >> $GITHUB_ENV
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Save AI Response Cache
      if: success()
      uses: actions/cache@v3
      with:
        path: ~/.ai_sec/openai_cache.json
        key: ${{ runner.os }}-ai-sec-cache-${{ hashFiles('~/.ai_sec/openai_cache.json') }}

    - name: Analyze Report (Generate Job Summary)
      run: |
        SUMMARY_PATH="reports/summary_report.json"
        BRANCH_DIR="${{ github.head_ref }}"
        if [ -z "$BRANCH_DIR" ]; then
          BRANCH_DIR="${{ github.ref_name }}"
        fi
        REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$BRANCH_DIR/report.html"

        echo "### AI Sec Linter Results" >> $GITHUB_STEP_SUMMARY

        if [ -f "$SUMMARY_PATH" ]; then
          TOTAL_ISSUES=$(jq '.total_issues // 0' $SUMMARY_PATH)
          CRITICAL_COUNT=$(jq '.by_severity.critical // 0' $SUMMARY_PATH)
          HIGH_COUNT=$(jq '.by_severity.high // 0' $SUMMARY_PATH)
          MEDIUM_COUNT=$(jq '.by_severity.medium // 0' $SUMMARY_PATH)
          LOW_COUNT=$(jq '.by_severity.low // 0' $SUMMARY_PATH)
          WARNING_COUNT=$(jq '.by_severity.warning // 0' $SUMMARY_PATH)

          echo "| Severity      | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Critical**  | $CRITICAL_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| **High**      | $HIGH_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| **Medium**    | $MEDIUM_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| **Low**       | $LOW_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| **Warning**   | $WARNING_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total Issues: **$TOTAL_ISSUES**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Full Report]($REPORT_URL)" >> $GITHUB_STEP_SUMMARY
        else
          echo "No report found. Skipping job summary." >> $GITHUB_STEP_SUMMARY
        fi
      shell: bash