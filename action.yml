name: "AI Sec Linter"
description: "Run the AI Sec linter for Terraform and Kubernetes configurations."
author: "Darren Rabbitt"

inputs:
  infra_dir:
    description: "Path to the infrastructure directory to lint."
    required: true
  config_path:
    description: "Path to the config.yaml file. Defaults to './config/config.yaml'."
    required: false
    default: "./config/config.yaml"
  openai_api_token:
    description: "OpenAI API token for optional insights."
    required: false
    default: ""
  fail_on_critical:
    description: "Whether to fail the job on critical issues."
    required: false
    default: "true"
  fail_on_high:
    description: "Whether to fail the job on high issues."
    required: false
    default: "false"
  fail_on_medium:
    description: "Whether to fail the job on medium issues."
    required: false
    default: "false"
  github_token:
    description: "Optional GitHub token for deploying static reports to GitHub Pages."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Restore AI Response Cache
      uses: actions/cache@v3
      with:
        path: ~/.ai_sec/openai_cache.json
        key: ${{ runner.os }}-ai-sec-cache-${{ hashFiles('~/.ai_sec/openai_cache.json') }}
        restore-keys: |
          ${{ runner.os }}-ai-sec-cache-

    - name: Run AI Sec Linter
      uses: docker://darrendev80/ai_sec:latest
      env:
        INFRA_DIR: "${{ inputs.infra_dir }}"
        CONFIG_FILE: "${{ inputs.config_path }}"
        OPENAI_API_KEY: "${{ inputs.openai_api_token }}"
        AI_SEC_NO_DASH: "true"
      with:
        args: |
          --infra-dir=${{ inputs.infra_dir }}
          --config-path=${{ inputs.config_path }}
          --no-dash

    - name: Upload AI Sec Report
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v3
      with:
        name: ai-sec-report
        path: |
          reports/report.json
          reports/summary_report.json
          reports/report.html

    - name: Deploy Static Report to GitHub Pages
      if: ${{ inputs.github_token != '' }}
      uses: crazy-max/ghaction-github-pages@v4
      with:
        target_branch: gh-pages
        build_dir: reports
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Save AI Response Cache
      if: success()
      uses: actions/cache@v3
      with:
        path: ~/.ai_sec/openai_cache.json
        key: ${{ runner.os }}-ai-sec-cache-${{ hashFiles('~/.ai_sec/openai_cache.json') }}

    - name: Analyze Report (Local Testing)
      run: |
        echo "Analyzing AI Sec report locally..."
        if [ -f reports/summary_report.json ]; then
          echo "Report found: reports/summary_report.json"
          cat reports/summary_report.json
          
          CRITICAL_COUNT=$(jq '.by_severity.critical // 0' reports/summary_report.json)
          HIGH_COUNT=$(jq '.by_severity.high // 0' reports/summary_report.json)
          MEDIUM_COUNT=$(jq '.by_severity.medium // 0' reports/summary_report.json)
          LOW_COUNT=$(jq '.by_severity.low // 0' reports/summary_report.json)
          WARNING_COUNT=$(jq '.by_severity.warning // 0' reports/summary_report.json)
          
          echo "Critical Issues: $CRITICAL_COUNT"
          echo "High Issues: $HIGH_COUNT"
          echo "Medium Issues: $MEDIUM_COUNT"
          echo "Low Issues: $LOW_COUNT"
          echo "Warnings: $WARNING_COUNT"
          
          FAIL_ON_CRITICAL=${{ inputs.fail_on_critical }}
          FAIL_ON_HIGH=${{ inputs.fail_on_high }}
          FAIL_ON_MEDIUM=${{ inputs.fail_on_medium }}
          
          if [[ "$FAIL_ON_CRITICAL" == "true" && "$CRITICAL_COUNT" -gt 0 ]]; then
            echo "Critical issues found. Failing the job."
            exit 1
          elif [[ "$FAIL_ON_HIGH" == "true" && "$HIGH_COUNT" -gt 0 ]]; then
            echo "High issues found. Failing the job."
            exit 1
          elif [[ "$FAIL_ON_MEDIUM" == "true" && "$MEDIUM_COUNT" -gt 0 ]]; then
            echo "Medium issues found. Failing the job."
            exit 1
          else
            echo "No critical or high issues found, or configured to ignore them. Proceeding."
          fi
        else
          echo "No report found. Skipping analysis."
          exit 1
        fi
      shell: bash